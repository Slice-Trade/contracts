{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_adapterData",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "_refundAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_swapDataPayload",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "_payloadData",
						"type": "bytes"
					}
				],
				"name": "adapterBridge",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amountBridged",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_payloadData",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "executePayload",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_adapterData",
						"type": "bytes"
					}
				],
				"name": "sendMessage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amountBridged",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_swapData",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_payloadData",
						"type": "bytes"
					}
				],
				"name": "swap",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"adapterBridge(bytes,address,bytes,bytes)": {
					"params": {
						"_adapterData": "The adapter data to pass to adapter",
						"_payloadData": "The payload data to pass to pass through bridge",
						"_swapDataPayload": "The swap data payload to pass through bridge"
					}
				},
				"executePayload(uint256,bytes,address)": {
					"params": {
						"_amountBridged": "The amount of tokens bridged",
						"_payloadData": "The payload data to pass to payload executor",
						"_token": "The address of the token to swap"
					}
				},
				"sendMessage(bytes)": {
					"params": {
						"_adapterData": "The adapter data to pass to adapter"
					}
				},
				"swap(uint256,bytes,address,bytes)": {
					"params": {
						"_amountBridged": "The amount of tokens bridged",
						"_payloadData": "The payload data to pass to payload executor",
						"_swapData": "The swap data to pass to RouteProcessor",
						"_token": "The address of the token to swap"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"adapterBridge(bytes,address,bytes,bytes)": {
					"notice": "Where the actual bridging is executed from on adapter"
				},
				"executePayload(uint256,bytes,address)": {
					"notice": "Execute a payload after bridging - w/o pre-swapping"
				},
				"sendMessage(bytes)": {
					"notice": "Where the actual messaging is executed from on adapter"
				},
				"swap(uint256,bytes,address,bytes)": {
					"notice": "Perform a swap after post bridging"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/utils/TenderlyUpload.sol": "ISushiXSwapV2Adapter"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 50
		},
		"remappings": [
			":@lz-oapp-v2/=lib/lz-oapp-v2/src/",
			":@openzeppelin/=lib/openzeppelin-contracts/",
			":ds-test/=lib/forge-std/lib/ds-test/src/",
			":forge-std/=lib/forge-std/",
			":forge-std/=lib/forge-std/src/"
		]
	},
	"sources": {
		"src/utils/TenderlyUpload.sol": {
			"keccak256": "0xd44221ee180c1a062de1ebc0829cb284d723e63f0f2c3670150c06e23d206657",
			"license": "MIT",
			"urls": [
				"bzz-raw://369ce46afdefe5ea91a495bb01435edc31c79ba683a007ef112fc977b72d6ab0",
				"dweb:/ipfs/QmRsYsdHqqQw9NSsXD1q88eep75SFZZDvGf62i9UXtEF2s"
			]
		}
	},
	"version": 1
}